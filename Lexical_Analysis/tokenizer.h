#ifndef tokenizer_H
#define tokenizer_H

#include "TOKEN.h"

#define MATCH(string, value) if (T == string) return value
#define TOKEN_TO_STRING(string, value) if (T == value) return string
TOKENS getToken(string T) {

    //KEYWORDS
    MATCH("if", IF);
    MATCH("owise", OWISE);
    MATCH("let", LET);
    MATCH("in", IN_K);
    MATCH("for", FOR);
    MATCH("to", TO);
    MATCH("step", STEP);
    MATCH("while", WHILE);
    MATCH("until", UNTIL);
    MATCH("return", RETURN);
    MATCH("leave", LEAVE);
    MATCH("from", FROM);

    //SEPARATORS
    MATCH("(", LPAREN);
    MATCH(")", RPAREN);
    MATCH("[", LSQBR);
    MATCH("]", RSQBR);
    MATCH("{", LBRACE);
    MATCH("}", RBRACE);
    MATCH(";", SEMI_COLON);
    //MATCH(":", COLON);
    //MATCH(".", PERIOD);
    MATCH(",", COMMA);

    //OPERATORS
    MATCH("+", PLUS);
    MATCH("/", DIVIDE);
    MATCH("=", ASSIGN);
    MATCH("*", MULTIPLY);
    MATCH("-", SUBTRACT);
    MATCH(">", GT);
    MATCH("<", LT);
    MATCH("^", POWER);
    MATCH("%", MODULUS);
    MATCH("!", LNOT);
    MATCH("ISNOT", LNOT);
    MATCH("+=", PLUS_ASSIGN);
    MATCH("-=", SUB_ASSIGN);
    MATCH(">=", GTE);
    MATCH("<=", LTE);
    MATCH("^=", PWR_ASSIGN);
    MATCH("++", INC);
    MATCH("--", DEC);
    MATCH("!=", NOT_EQ);
    MATCH("*=", MUL_ASSIGN);
    MATCH("/=", DIV_ASSIGN);
    MATCH("?=", IS_EQ);
    MATCH("||", LOR);
    MATCH("&&", LAND);
    MATCH("OR", LOR);
    MATCH("AND", LAND);
    MATCH("DATALIST", DATALIST);

    //BOOLEAN LITERALS
    MATCH("TRUE", TRUE_K);
    MATCH("FALSE", FALSE_K);

    //SPECIAL CHARS
    MATCH("\"", QUOT_MARK);

    return UNKNOWN_ILLEGAL;

}

string tokenToString(int T) {

    TOKEN_TO_STRING("if", IF);
    //TOKEN_TO_STRING("then", THEN);
    TOKEN_TO_STRING("owise", OWISE);
    TOKEN_TO_STRING("let", LET);
    TOKEN_TO_STRING("in", IN_K);
    //TOKEN_TO_STRING("job", JOB);
    TOKEN_TO_STRING("for", FOR);
    TOKEN_TO_STRING("to", TO);
    TOKEN_TO_STRING("step", STEP);
    //TOKEN_TO_STRING("do", DO);
    //TOKEN_TO_STRING("import", IMPORT);
    TOKEN_TO_STRING("while", WHILE);
    TOKEN_TO_STRING("until", UNTIL);
    TOKEN_TO_STRING("return", RETURN);
    TOKEN_TO_STRING("leave", LEAVE);
    //TOKEN_TO_STRING("switch", SWITCH);
    //TOKEN_TO_STRING("default", DEFAULT);
    //TOKEN_TO_STRING("case", CASE);
    TOKEN_TO_STRING("from", FROM);

    //SEPARATORS
    TOKEN_TO_STRING("(", LPAREN);
    TOKEN_TO_STRING(")", RPAREN);
    TOKEN_TO_STRING("[", LSQBR);
    TOKEN_TO_STRING("]", RSQBR);
    TOKEN_TO_STRING("{", LBRACE);
    TOKEN_TO_STRING("}", RBRACE);
    TOKEN_TO_STRING(";", SEMI_COLON);
    //TOKEN_TO_STRING(":", COLON);
    //TOKEN_TO_STRING(".", PERIOD);
    TOKEN_TO_STRING(",", COMMA);

    //OPERATORS
    TOKEN_TO_STRING("+", PLUS);
    TOKEN_TO_STRING("/", DIVIDE);
    TOKEN_TO_STRING("=", ASSIGN);
    TOKEN_TO_STRING("*", MULTIPLY);
    TOKEN_TO_STRING("-", SUBTRACT);
    TOKEN_TO_STRING(">", GT);
    TOKEN_TO_STRING("<", LT);
    TOKEN_TO_STRING("^", POWER);
    TOKEN_TO_STRING("%", MODULUS);
    TOKEN_TO_STRING("!", LNOT);
    TOKEN_TO_STRING("ISNOT", LNOT);
    TOKEN_TO_STRING("+=", PLUS_ASSIGN);
    TOKEN_TO_STRING("-=", SUB_ASSIGN);
    TOKEN_TO_STRING(">=", GTE);
    TOKEN_TO_STRING("<=", LTE);
    TOKEN_TO_STRING("^=", PWR_ASSIGN);
    TOKEN_TO_STRING("++", INC);
    TOKEN_TO_STRING("--", DEC);
    TOKEN_TO_STRING("!=", NOT_EQ);
    TOKEN_TO_STRING("*=", MUL_ASSIGN);
    TOKEN_TO_STRING("/=", DIV_ASSIGN);
    TOKEN_TO_STRING("?=", IS_EQ);
    TOKEN_TO_STRING("||", LOR);
    TOKEN_TO_STRING("&&", LAND);
    TOKEN_TO_STRING("OR", LOR);
    TOKEN_TO_STRING("AND", LAND);
    TOKEN_TO_STRING("NULLT", NULLT);
    TOKEN_TO_STRING("DATALIST", DATALIST);

    //BOOLEAN LITERALS
    TOKEN_TO_STRING("TRUE", TRUE_K);
    TOKEN_TO_STRING("FALSE", FALSE_K);

    //SPECIAL CHARS
    TOKEN_TO_STRING("\"", QUOT_MARK);
    //TOKEN_TO_STRING("SPEC_CHAR", SPEC_CHAR);

    //STRING LITERALS
    TOKEN_TO_STRING("STR_LIT", STR_LIT);

    //ID
    TOKEN_TO_STRING("ID", ID);

    //ILLEGAL/UNKNOWN
    TOKEN_TO_STRING("UNKNOWN_ILLEGAL", UNKNOWN_ILLEGAL);

    //CONSTANT
    TOKEN_TO_STRING("CONST", CONST_K);

    //ILLEGAL_ID
    TOKEN_TO_STRING("ILL_ID", ILL_ID);

    //EOF_TOKEN
    TOKEN_TO_STRING("PROGRAM", PROGRAM);
    TOKEN_TO_STRING("GLOBAL_STMTS", GLOBAL_STMTS);
    TOKEN_TO_STRING("GLOBAL_DECS", GLOBAL_DECS);
    TOKEN_TO_STRING("STMTS", STMTS);
    TOKEN_TO_STRING("IF_STATEMENT", IF_STATEMENT);
    TOKEN_TO_STRING("OTHERWISE", OTHERWISE);
    TOKEN_TO_STRING("OTHERWISE_BRANCH", OTHERWISE_BRANCH);
    TOKEN_TO_STRING("UNTIL_STATEMENT", UNTIL_STATEMENT);
    TOKEN_TO_STRING("WHILE_STATEMENT", WHILE_STATEMENT);
    TOKEN_TO_STRING("FOR_STATEMENT", FOR_STATEMENT);
    TOKEN_TO_STRING("FUNC_DECLARATION", FUNC_DECLARATION);
    TOKEN_TO_STRING("RETURNS", RETURNS);
    TOKEN_TO_STRING("STMT", STMT);
    TOKEN_TO_STRING("PARAMETERS", PARAMETERS);
    TOKEN_TO_STRING("EXTRA_PARAMETERS", EXTRA_PARAMETERS);
//	TOKEN_TO_STRING("EXPRORLIST", EXPRORLIST);
    TOKEN_TO_STRING("EXPR", EXPR);
    TOKEN_TO_STRING("EXPRA", EXPRA);
    TOKEN_TO_STRING("EXPR1", EXPR1);
    TOKEN_TO_STRING("EXPRB", EXPRB);
    TOKEN_TO_STRING("EXPR2", EXPR2);
    TOKEN_TO_STRING("EXPRC", EXPRC);
    TOKEN_TO_STRING("EXPR3", EXPR3);
    TOKEN_TO_STRING("EXPRD", EXPRD);
    TOKEN_TO_STRING("EXPR4", EXPR4);
    TOKEN_TO_STRING("EXPRE", EXPRE);
    TOKEN_TO_STRING("EXPR5", EXPR5);
    TOKEN_TO_STRING("EXPRF", EXPRF);
    TOKEN_TO_STRING("EXPR6", EXPR6);
    TOKEN_TO_STRING("EXPRG", EXPRG);
    TOKEN_TO_STRING("EXPR7", EXPR7);
    TOKEN_TO_STRING("OP", OP);
    TOKEN_TO_STRING("EXPR8", EXPR8);
    TOKEN_TO_STRING("EXPR9", EXPR9);
    TOKEN_TO_STRING("FUNCORDATA", FUNCORDATA);
//	TOKEN_TO_STRING("LIST_DATA", LIST_DATA);
//	TOKEN_TO_STRING("LST_DATA", LST_DATA);
//	TOKEN_TO_STRING("EXTRA_DIMENSION", EXTRA_DIMENSION);
//	TOKEN_TO_STRING("DIMENSION", DIMENSION);
//	TOKEN_TO_STRING("PARAMORLST", PARAMORLST);
//	TOKEN_TO_STRING("LST_DATA_PARAMS", LST_DATA_PARAMS);
    TOKEN_TO_STRING("VARIABLE_DECLARATION", VARIABLE_DECLARATION);
    TOKEN_TO_STRING("EOF_TOKEN", EOF_TOKEN);

    TOKEN_TO_STRING("ACTION_ASSIGN", ACTION_ASSIGN);
    TOKEN_TO_STRING("ACTION_ADD", ACTION_ADD);
    TOKEN_TO_STRING("ACTION_NEW_VAR", ACTION_NEW_VAR);
    TOKEN_TO_STRING("ACTION_PUSH_CONST", ACTION_PUSH_CONST);
    TOKEN_TO_STRING("ACTION_SUB", ACTION_SUB);
    TOKEN_TO_STRING("ACTION_DIV", ACTION_DIV);
    TOKEN_TO_STRING("ACTION_CREATE_VAR", ACTION_CREATE_VAR);
    TOKEN_TO_STRING("ACTION_MUL", ACTION_MUL);
    TOKEN_TO_STRING("ACTION_POS", ACTION_POS);
    TOKEN_TO_STRING("ACTION_NEG", ACTION_NEG);
    TOKEN_TO_STRING("ACTION_NOT", ACTION_NOT);
    TOKEN_TO_STRING("ACTION_POST_INC", ACTION_POST_INC);
    TOKEN_TO_STRING("ACTION_PRE_INC", ACTION_PRE_INC);
    TOKEN_TO_STRING("ACTION_POST_DEC", ACTION_POST_DEC);
    TOKEN_TO_STRING("ACTION_PRE_DEC", ACTION_PRE_DEC);
    TOKEN_TO_STRING("ACTION_LOR", ACTION_LOR);
    TOKEN_TO_STRING("ACTION_LAND", ACTION_LAND);
    TOKEN_TO_STRING("ACTION_NOT_EQ", ACTION_NOT_EQ);
    TOKEN_TO_STRING("ACTION_IS_EQ", ACTION_IS_EQ);
    TOKEN_TO_STRING("ACTION_MOD", ACTION_MOD);
    TOKEN_TO_STRING("ACTION_POW", ACTION_POW);
    TOKEN_TO_STRING("ACTION_GTE", ACTION_GTE);
    TOKEN_TO_STRING("ACTION_GT", ACTION_GT);
    TOKEN_TO_STRING("ACTION_LT", ACTION_LT);
    TOKEN_TO_STRING("ACTION_LTE", ACTION_LTE);

    TOKEN_TO_STRING("ACTION_SUB_ASS", ACTION_SUB_ASS);
    TOKEN_TO_STRING("ACTION_PLUS_ASS", ACTION_PLUS_ASS);
    TOKEN_TO_STRING("ACTION_DIV_ASS", ACTION_DIV_ASS);
    TOKEN_TO_STRING("ACTION_MUL_ASS", ACTION_MUL_ASS);
    TOKEN_TO_STRING("ACTION_PWR_ASS", ACTION_PWR_ASS);

    TOKEN_TO_STRING("ACTION_RESUME", ACTION_RESUME);
    TOKEN_TO_STRING("ACTION_CHECK", ACTION_CHECK);
    TOKEN_TO_STRING("ACTION_NEW_IF", ACTION_NEW_IF);
    TOKEN_TO_STRING("ACTION_END_IF", ACTION_END_IF);

    TOKEN_TO_STRING("ACTION_NEW_FUNC", ACTION_NEW_FUNC);
    TOKEN_TO_STRING("ACTION_END_FUNC", ACTION_END_FUNC);
    TOKEN_TO_STRING("ACTION_FUNC_CALL", ACTION_FUNC_CALL);
    TOKEN_TO_STRING("ACTION_RETURN", ACTION_RETURN);
    TOKEN_TO_STRING("ACTION_PUSH", ACTION_PUSH);
    TOKEN_TO_STRING("ACTION_POP", ACTION_POP);
    TOKEN_TO_STRING("ACTION_PARAM", ACTION_PARAM);
    TOKEN_TO_STRING("ACTION_FUNC_NAME", ACTION_FUNC_NAME);
    TOKEN_TO_STRING("ACTION_INIT", ACTION_INIT);
    TOKEN_TO_STRING("ACTION_OWISE", ACTION_OWISE);
    TOKEN_TO_STRING("ACTION_OWISE_IF", ACTION_OWISE_IF);
    TOKEN_TO_STRING("ACTION_OWISE_BRANCH", ACTION_OWISE_BRANCH);

    TOKEN_TO_STRING("ACTION_CHECK_WHILE", ACTION_CHECK_WHILE);
    TOKEN_TO_STRING("ACTION_JUMP_BACK", ACTION_JUMP_BACK);
    TOKEN_TO_STRING("ACTION_EVAL_WHILE", ACTION_EVAL_WHILE);
    TOKEN_TO_STRING("ACTION_START_LOOP", ACTION_START_LOOP);
    TOKEN_TO_STRING("ACTION_END_LOOP", ACTION_END_LOOP);
    TOKEN_TO_STRING("ACTION_SET_CURRENT", ACTION_SET_CURRENT);
    TOKEN_TO_STRING("ACTION_PUSH_BRACK", ACTION_PUSH_BRACK);
    TOKEN_TO_STRING("ACTION_PUSH_SQR_BRACK", ACTION_PUSH_SQR_BRACK);
    TOKEN_TO_STRING("ACTION_COLLECT_LIST", ACTION_COLLECT_LIST);
    TOKEN_TO_STRING("ACTION_INDEX", ACTION_INDEX);

    TOKEN_TO_STRING("FUNC_LOG", FUNC_LOG);
    TOKEN_TO_STRING("FUNC_LOG_2", FUNC_LOG_2);
    TOKEN_TO_STRING("FUNC_DRAW_OVAL_PRIM", FUNC_DRAW_OVAL_PRIM);
    TOKEN_TO_STRING("FUNC_FILL_OVAL_PRIM", FUNC_FILL_OVAL_PRIM);
    TOKEN_TO_STRING("FUNC_FILL_RECT_PRIM", FUNC_FILL_RECT_PRIM);
    TOKEN_TO_STRING("FUNC_DRAW_RECT_PRIM", FUNC_DRAW_RECT_PRIM);
    TOKEN_TO_STRING("FUNC_SET_BACKGROUND_PRIM", FUNC_SET_BACKGROUND_PRIM);
    TOKEN_TO_STRING("FUNC_SET_COLOR_PRIM", FUNC_SET_COLOR_PRIM);
    TOKEN_TO_STRING("FUNC_SET_LINE_WEIGHT_PRIM", FUNC_SET_LINE_WEIGHT_PRIM);
    TOKEN_TO_STRING("FUNC_DRAW_LINE_PRIM", FUNC_DRAW_LINE_PRIM);
    TOKEN_TO_STRING("FUNC_CLEAR_SCREEN_PRIM", FUNC_CLEAR_SCREEN_PRIM);
    TOKEN_TO_STRING("FUNC_SIZE_PRIM", FUNC_SIZE_PRIM);

    TOKEN_TO_STRING("FUNC_PREPEND_PRIM", FUNC_PREPEND_PRIM);
    TOKEN_TO_STRING("FUNC_APPEND_PRIM", FUNC_APPEND_PRIM);

    TOKEN_TO_STRING("FUNC_SIN_PRIM", FUNC_SIN_PRIM);
    TOKEN_TO_STRING("FUNC_COS_PRIM", FUNC_COS_PRIM);
    TOKEN_TO_STRING("FUNC_TAN_PRIM", FUNC_TAN_PRIM);
    TOKEN_TO_STRING("FUNC_ASIN_PRIM", FUNC_ASIN_PRIM);
    TOKEN_TO_STRING("FUNC_ACOS_PRIM", FUNC_ACOS_PRIM);
    TOKEN_TO_STRING("FUNC_ATAN_PRIM", FUNC_ATAN_PRIM);
    TOKEN_TO_STRING("FUNC_LOG_PRIM", FUNC_LOG_PRIM);
    TOKEN_TO_STRING("FUNC_ROOT_PRIM", FUNC_ROOT_PRIM);
    TOKEN_TO_STRING("FUNC_ABS_PRIM", FUNC_ABS_PRIM);
    TOKEN_TO_STRING("FUNC_FLOOR_PRIM", FUNC_FLOOR_PRIM);
    TOKEN_TO_STRING("FUNC_CEIL_PRIM", FUNC_CEIL_PRIM);
    TOKEN_TO_STRING("FUNC_RAND_PRIM", FUNC_RAND_PRIM);
    TOKEN_TO_STRING("FUNC_RADIANS_PRIM", FUNC_RADIANS_PRIM);
    TOKEN_TO_STRING("FUNC_DEGREES_PRIM", FUNC_DEGREES_PRIM);

    TOKEN_TO_STRING("FUNC_TRANS_PRIM", FUNC_TRANS_PRIM);
    TOKEN_TO_STRING("FUNC_SCALE_PRIM", FUNC_SCALE_PRIM);
    TOKEN_TO_STRING("FUNC_ROT_PRIM", FUNC_ROT_PRIM);

    TOKEN_TO_STRING("FUNC_MOUSE_X_PRIM", FUNC_MOUSE_X_PRIM);
    TOKEN_TO_STRING("FUNC_MOUSE_Y_PRIM", FUNC_MOUSE_Y_PRIM);

    TOKEN_TO_STRING("FUNC_DRAW_ARC_PRIM", FUNC_DRAW_ARC_PRIM);
    TOKEN_TO_STRING("FUNC_DRAW_ARC_PRIM", FUNC_DRAW_ARC_PRIM);
}

#endif
